[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/__pycache__/imaplib.cpython-38.opt-1.pyc[0m
24:QUOTA..GETQUOTAROOT..MYRIGHTS..LIS.
42: However, the 'password' argument to t.
185:.Get the quota root's resource usa.
189:ance>.getquota(root).
190:Ar.).rV..rootr.r.r?.
190: list of quota roots for the named.
192:  (typ, [[QUOTAROOT responses...],.
192:tance>.getquotaroot(mailbox).
193:r...QUOTAROOTr.).rVr..
193:..quota..quotarootr?r?r@.
193:..getquotaroot;.s.......
193:.IMAP4.getquotaroot..""..*c..
199:sing plaintext password..
201:e>.login(user, password).
203:        NB: 'password' will be quote.
204:).rV..user..passwordr.r.r?.
207:cram_md5(user, password).
209:hallenger...pwdr?r?r@.
239: an authorised administrator to pro.
271:iSet the quota root's resource lim.
273:ance>.setquota(root, limits).
282:Nr4z.SSL support missin.
282:ession)...HAVE_SSLrArNrB.
282:rr..ssl.._create_stdli.
282:r.).rV..ssl_contextr.r..
370:..IMAP4_SSLa3.IMAP4 clie.
370:nt class over SSL connection.
372:te with: IMAP4_SSL([host[, port[,.
372:e[, certfile[, ssl_context]]]]]).
375:standard IMAP4 SSL port);.
376: contains your private key (default: None.
378:               ssl_context - a SS.
379:           and private key (default: None.
380:      Note: if ssl_context is pro.
385:|....dS).Nz8ssl_context and ke.
385:lly exclusivez9ssl_context and ce.
385:, use a custom ssl_context instea.
386:.......z.IMAP4_SSL.__init__c..
387:.....z.IMAP4_SSL._create_socket.
388:standard IMAP4 SSL port)..
391:s..z.IMAP4_SSL.open).r<r=.
391:rV...IMAP4_SSL_PORTrYr..
454:s).rDz.IMAP password for %s on %s: .
464:getuser..USER..PASSWD..test_mesg..te.
