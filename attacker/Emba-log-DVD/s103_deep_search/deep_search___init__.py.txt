[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/setuptools/extern/__init__.py[0m
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/pkg_resources/__init__.py[0m
7: packages from root_name..
1594:      self.egg_root = path.
10:__init__(self, root_name, vendored.
1723:swith(self.egg_root + os.sep):.
11:        self.root_name = root_na.
1724:h[len(self.egg_root) + 1:].split(o.
13: vendor_pkg or root_name.replace('.
1726:path, self.egg_root).
25:me starts with root_name and the.
1863:f._fn(self.egg_root, resource_name.
28:        root, base, target .
28:partition(self.root_name + '.').
2125:    root = os.path.dirn.
29:        if root:.
2130:= PathMetadata(root, path).
39:        root, base, target .
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/collections/__init__.py[0m
2135:        root, entry, metada.
39:partition(self.root_name + '.').
91: in self.__hardroot with a weakref.
91:roxy in self.__root..
101:        self.__root.
103:    self.__hardroot = _Link().
104:        self.__root = root = _prox.
104:y(self.__hardroot).
105:            root.prev = root.ne.
105:xt = root.
116:            root = self.__root.
117:        last = root.prev.
118:nk.key = last, root, key.
120:            root.prev = proxy(l.
139:        root = self.__root.
140:        curr = root.next.
141:le curr is not root:.
148:        root = self.__root.
149:        curr = root.prev.
150:le curr is not root:.
156:        root = self.__root.
157:        root.prev = root.ne.
157:xt = root.
168:        root = self.__root.
170:        link = root.prev.
172:nk_prev.next = root.
173:            root.prev = link_pr.
175:        link = root.next.
177:            root.next = link_ne.
178:nk_next.prev = root.
195:        root = self.__root.
197:        last = root.prev.
199:   link.next = root.
200:            root.prev = soft_li.
203:       first = root.next.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/http/__init__.py[0m
204:   link.prev = root.
32:protocol; obey Upgrade header').
207:            root.next = link.
108:    UPGRADE_REQUIRED = 426.
211:inks including root.
108:, 'Upgrade Required'.
214:eof(self.__hardroot) * n     # lin.
215: sizeof(self.__root) * n         #.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/hawkey/__init__.py[0m
148:DISTUPGRADE = _hawkey.DIST.
148:UPGRADE.
149:DISTUPGRADE_ALL = _hawkey..
149:DISTUPGRADE_ALL.
152:UPGRADE = _hawkey.UPGR.
153:UPGRADE_ALL = _hawkey..
153:UPGRADE_ALL.
195:        DISTUPGRADE,.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/ensurepip/__init__.py[0m
196:        DISTUPGRADE_ALL,.
49:f bootstrap(*, root=None, upgrade=.
199:        UPGRADE,.
53: (or the given root.
200:        UPGRADE_ALL.
59:    _bootstrap(root=root, upgrade=.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/__init__.py[0m
59:upgrade, user=user,.
87:.contrib.pyopenssl").
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/setuptools/_vendor/packaging/__init__.py[0m
64: _bootstrap(*, root=None, upgrade=.
94:llib3.packages.ssl_match_hostname.
2:SE file in the root of this reposi.
68: (or the given root.
95:llib3.packages.ssl_match_hostname.
76:ip.bootstrap", root).
105:s.urllib3.util.ssl_").
110:        if root:.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pkg_resources/extern/__init__.py[0m
111:   args += ["--root", root].
7: packages from root_name..
112:        if upgrade:.
10:__init__(self, root_name, vendored.
113:   args += ["--upgrade"].
11:        self.root_name = root_na.
167:      "-U", "--upgrade",.
13: vendor_pkg or root_name.replace('.
170:        help="Upgrade pip and depend.
25:me starts with root_name and the.
179:        "--root",.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/venv/__init__.py[0m
28:        root, base, target .
181:this alternate root directory.",.
37:    :param upgrade: If True, upgr.
28:partition(self.root_name + '.').
201:        root=args.root,.
44:ymlinks=False, upgrade=False, with_pi.
29:        if root:.
202:        upgrade=args.upgrade,.
39:        root, base, target .
48:        self.upgrade = upgrade.
69:   if not self.upgrade:.
39:partition(self.root_name + '.').
247:te copy of the root directory.
271:           for root, dirs, files i.
273:.path.basename(root).
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/flask/json/__init__.py[0m
277:= os.path.join(root, 'init.tcl').
322:  "username": "admin",.
283:"""Installs or upgrades pip in a virt.
287:ensurepip', '--upgrade',.
323:     "email": "admin@localhost",.
349:        for root, dirs, files i.
350:            if root == path: # at .
359:= os.path.join(root, f).
360:      suffix = root[plen:].split(o.
440:dd_argument('--upgrade', default=Fals.
441:         dest='upgrade', help='Upgrad.
444:     'has been upgraded in-place.').
454:    if options.upgrade and options.cl.
455:annot supply --upgrade and --clear to.
459:               upgrade=options.upgrad.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/librepo/__init__.py[0m
89:data:: LRO_USERPWD.
91:t username and password for HTTP authe.
92:rmat 'username:password'..
115:: LRO_PROXYUSERPWD.
117:t username and password for proxy.
118:rmat 'username:password'..
287:.. data:: LRO_SSLVERIFYPEER.
291:al signatures, rooted in certifica.
294:.. data:: LRO_SSLVERIFYHOST.
299:.. data:: LRO_SSLCLIENTCERT.
301:the PEM format SSL client certifi.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/urllib3/packages/ssl_match_hostname/__init__.py[0m
304:.. data:: LRO_SSLCLIENTKEY.
306:the PEM format SSL client key to .
11:    from ssl import Certifi.
309:.. data:: LRO_SSLCACERT.
15:from backports.ssl_match_hostname.
419:.. data:: LRI_SSLVERIFYPEER.
420:.. data:: LRI_SSLVERIFYHOST.
421:.. data:: LRI_SSLCLIENTCERT.
422:.. data:: LRI_SSLCLIENTKEY.
423:.. data:: LRI_SSLCACERT.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/setuptools/__init__.py[0m
745:data:: LRE_OPENSSL.
55:'where' is the root directory whic.
747:    (32) OpenSSL library relate.
80:        for root, dirs, files i.
1217:ttribute:: userpwd:.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/aiocoap/__init__.py[0m
86:= os.path.join(root, dir).
1219:data:`.LRO_USERPWD`.
23:This root module re-expo.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/html5lib/treebuilders/__init__.py[0m
23: - Returns the root node of the co.
1237:ute:: proxyuserpwd:.
27:ontext` in the root module is.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/logging/__init__.py[0m
1239:`.LRO_PROXYUSERPWD`.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/urllib3/packages/__init__.py[0m
1261:__init__(self, rootnode):.
3:from . import ssl_match_hostname.
1357:.. attribute:: sslverifypeer:.
1263:nager with the root node of the lo.
5:__all__ = ("ssl_match_hostname.
1359:ee :data:`.LRO_SSLVERIFYPEER`.
1265:        self.root = rootnode.
1361:.. attribute:: sslverifyhost:.
1326: logger to the root of the logger .
1363:ee :data:`.LRO_SSLVERIFYHOST`.
1344:     rv = self.root.
1365:.. attribute:: sslclientcert:.
1370:        self.root._cache.clear().
1367:ee :data:`.LRO_SSLCLIENTCERT`.
1714:       if self.root is not self:.
1369:.. attribute:: sslclientkey:.
1723:eral, only the root logger will no.
1371:ee :data:`.LRO_SSLCLIENTKEY`.
1724:# However, the root logger's class.
1373:.. attribute:: sslcacert:.
1731:class RootLogger(Logger):.
1375:ee :data:`.LRO_SSLCACERT`.
1733:    A root logger is not .
1739:with the name "root"..
1741:_init__(self, "root", level).
1888:root = RootLogger(WARNING).
1889:Logger.root = root.
1890:Manager(Logger.root).
1900:nothing if the root logger already.
1907:handler to the root logger..
1922:el     Set the root logger level t.
1927:e added to the root handler. Any h.
1931:ttached to the root logger are rem.
1959:      for h in root.handlers[:]:.
1960:               root.removeHandler(.
1962:        if len(root.handlers) == 0.
1991:               root.addHandler(h).
1994:               root.setLevel(level.
2003:rything to the root logger..
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/greenlet/__init__.py[0m
2010:ed, return the root logger..
3:The root of the greenle.
2015:        return root.
2019:ITICAL' on the root logger. If the.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/dnf/rpm/__init__.py[0m
2023:    if len(root.handlers) == 0.
2025:    root.critical(msg, .
29:easever(installroot):.
2031:'ERROR' on the root logger. If the.
33:nlyTransaction(root=installroot).
2035:    if len(root.handlers) == 0.
2037:    root.error(msg, *ar.
2041:'ERROR' on the root logger, with e.
2049:ARNING' on the root logger. If the.
2053:    if len(root.handlers) == 0.
2055:    root.warning(msg, *.
2064: 'INFO' on the root logger. If the.
2068:    if len(root.handlers) == 0.
2070:    root.info(msg, *arg.
2074:'DEBUG' on the root logger. If the.
2078:    if len(root.handlers) == 0.
2080:    root.debug(msg, *ar.
2084:'level' on the root logger. If.
2088:    if len(root.handlers) == 0.
2090:    root.log(level, msg.
2096:    root.manager.disabl.
2097:    root.manager._clear.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pkg_resources/_vendor/packaging/__init__.py[0m
2:SE file in the root of this reposi.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/dnf/cli/commands/__init__.py[0m
166:', 'updates', 'upgrades',.
185:const', const='upgrades',.
186:p=_("show only upgrades packages")).
187:dd_argument('--upgrades', dest='_pack.
188:const', const='upgrades',.
189:p=_("show only upgrades packages")).
213:ages_action = 'upgrades'.
261:pdate', 'check-upgrade').
262:ilable package upgrades').
280:e.sack.query().upgrades().
350:       demands.root_user = True.
402:       demands.root_user = True.
457:       demands.root_user = True.
545:       demands.root_user = True.
564:base._goal.distupgrade(package).
607:       demands.root_user = True.
657:       demands.root_user = True.
686:    class UpgradeSubCommand(Comm.
687:ntation of the upgrade sub-command."".
689:   aliases = ('upgrade', 'upgrade-to'.
696:       demands.root_user = True.
706:     self.base.upgrade_all(self.repon.
712:     self.base.upgrade(pkg_spec, self.
719:ges marked for upgrade.')).
725:               UpgradeSubCommand}.
748:              'upgrades'}.
764:const', const='upgrades',.
765:p=_("show only upgrades packages")).
766:dd_argument('--upgrades', dest='_pkg_.
767:const', const='upgrades',.
768:p=_("show only upgrades packages")).
854:       demands.root_user = True.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/requests/__init__.py[0m
105:# 'ssl' library isn't.
113:        import ssl.
115:        ssl = None.
117:if not getattr(ssl, "HAS_SNI", Fa.
118:b import pyopenssl.
119:        pyopenssl.inject_into_ur.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/packaging/__init__.py[0m
2:SE file in the root of this reposi.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_internal/locations/__init__.py[0m
175:    root: Optional[str].
182:        "root = %r",.
186:), user, home, root, prefix).
193:    root: Optional[str].
201:        root=root,.
212:        root=root,.
330:        root,.
351:er, home=home, root=root, prefix=p.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/zope/interface/common/__init__.py[0m
75:     ... class Root(object):.
78:>> class Child(Root):.
82:nstance(child, Root).
263: to create the root ABCInterface, .
266:    # root..
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/platformdirs/__init__.py[0m
19:etenv("ANDROID_ROOT") == "/system".
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_internal/req/__init__.py[0m
41:    root: Optional[str].
76:               root=root,.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/click/__init__.py[0m
25:orators import password_option as pass.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/tkinter/__init__.py[0m
222:    x_root - x-position o.
224:    y_root - y-position o.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/urllib3/util/__init__.py[0m
263:        # x_root and y_root mos.
8:from .ssl_ import (.
274:upport_default_root = 1.
11:    IS_PYOPENSSL,.
275:_default_root = None.
14:    SSLContext,.
278:def NoDefaultRoot():.
17:    resolve_ssl_version,.
279:ing of default root window..
18:    ssl_wrap_socket,.
284:upport_default_root.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pkg_resources/__init__.py[0m
26:    "IS_PYOPENSSL",.
1595:      self.egg_root = path.
285:upport_default_root = 0.
28:    "SSLContext",.
286:lobal _default_root.
1724:swith(self.egg_root + os.sep):.
42:    "resolve_ssl_version",.
287:    _default_root = None.
1725:h[len(self.egg_root) + 1:].split(o.
44:    "ssl_wrap_socket",.
1727:path, self.egg_root).
288:  del _default_root.
1864:f._fn(self.egg_root, resource_name.
334:ter = _default_root.
2126:    root = os.path.dirn.
335:        self._root = master._root.
2131:= PathMetadata(root, path).
374:k, None, self._root).__call__.
2136:        root, entry, metada.
593:    _default_root.tk.mainloop(n).
604:eturn _default_root.tk.getboolean(.
847:efaults to the root window of the .
1058:ntaining(self, rootX, rootY, displ.
1059:hich is at the root coordinates RO.
1059:OTX, ROOTY.""".
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/werkzeug/debug/__init__.py[0m
162:er imports the pwd module, which .
1061:(displayof) + (rootX, rootY).
1128:pointer on the root window.""".
1133:pointer on the root window.""".
1138:pointer on the root window.""".
1158:    def winfo_rootx(self):.
1160:        root window.""".
1162:call('winfo', 'rootx', self._w)).
1164:    def winfo_rooty(self):.
1166:        root window.""".
1168:call('winfo', 'rooty', self._w)).
1181:r pixel of the root window of the.
1260:    def winfo_vrootheight(self):.
1261:of the virtual root window associa.
1262: is no virtual root window return .
1265:all('winfo', 'vrootheight', self._.
1267:    def winfo_vrootwidth(self):.
1268:of the virtual root window associa.
1269: is no virtual root window return .
1272:all('winfo', 'vrootwidth', self._w.
1274:    def winfo_vrootx(self):.
1275:of the virtual root relative to th.
1275:e root.
1278:all('winfo', 'vrootx', self._w)).
1280:    def winfo_vrooty(self):.
1281:of the virtual root relative to th.
1281:e root.
1284:all('winfo', 'vrooty', self._w)).
1453:  return self._root()._windowingsy.
1455:    ws = self._root()._windowingsy.
1492:        w = w._root().
1528:    def _root(self):.
1565:        # x_root, y_root fields.
1591:        e.x_root = getint_event.
1592:        e.y_root = getint_event.
1602:        root = self._root().
1603:        root.report_callbac.
1845:   (e.g. x, y, rootx, rooty).""".
2066:     (example: root.iconbitmap(def.
2275:lobal _default_root.
2295:upport_default_root and not _defau.
2295:lt_root:.
2296:      _default_root = self.
2305:lobal _default_root.
2306:upport_default_root and _default_r.
2307:      _default_root = None.
2523:upport_default_root:.
2524:lobal _default_root.
2526:f not _default_root:.
2527:      _default_root = Tk().
2528:ter = _default_root.
2617:        root = self._root().
2618: self.iconname(root.iconname()).
2619:    self.title(root.title()).
3992:ter = _default_root.
4016: happen if the root was destroyed.
4148:eturn _default_root.tk.splitlist(_.
4148:default_root.tk.call('image.
4152:eturn _default_root.tk.splitlist(_.
4152:default_root.tk.call('image.
4552:    root = Tk().
4555: label = Label(root, text=text).
4557: test = Button(root, text="Click m.
4558:command=lambda root=root: root.tes.
4559: text="[%s]" % root.test['text'])).
4561:    root.test = test.
4562: quit = Button(root, text="QUIT", .
4562:command=root.destroy).
4566:    root.iconify().
4567:    root.update().
4568:    root.deiconify().
4569:    root.mainloop().
