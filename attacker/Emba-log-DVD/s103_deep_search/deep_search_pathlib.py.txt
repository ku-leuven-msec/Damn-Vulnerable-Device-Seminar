[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/pathlib.py[0m
67:        drv = root = ''.
74:          drv, root, rel = self.sp.
74:litroot(part).
82:     if drv or root:.
92:rv = self.splitroot(part)[0].
96:     if drv or root:.
97:d.append(drv + root).
99:   return drv, root, parsed.
101:rts(self, drv, root, parts, drv2, .
101:root2, parts2):.
104:       (drive, root, parts) tuples.
104: a new (drive, root, parts) tuple..
106:        if root2:.
108:   return drv, root2, [drv + root2.
112:   return drv, root, parts + parts.
115:   return drv, root, parts + parts.
116:  return drv2, root2, parts2.
145:    def splitroot(self, part, se.
159:vvvvvvvvvvvvvv root.
174:        drv = root = ''.
180:            root = first.
182: prefix + drv, root, part.
273:          drv, root, parts = self..
278:     if drv or root:.
279:erhome = drv + root + self.join(pa.
292:    def splitroot(self, part, se.
375:        import pwd.
376:        return pwd.getpwuid(os.ge.
378:        import pwd.
380:        return pwd.getpwnam(usern.
595:ls', '_drv', '_root', '_parts').
601:        self._root = path._root.
605:._drv or self._root:.
613:lf._drv, self._root,.
630:     '_drv', '_root', '_parts',.
674:        drv, root, parts = self..
676:        self._root = root.
683:arts(cls, drv, root, parts, init=T.
686:        self._root = root.
693:arts(cls, drv, root, parts):.
694:     if drv or root:.
695:  return drv + root + cls._flavour.
704:        drv, root, parts = self..
705:        drv, root, parts = self..
706:lf._drv, self._root, self._parts, .
706:drv, root, parts).
707:sed_parts(drv, root, parts).
715:lf._drv, self._root,.
786:    root = property(att.
786:rgetter('_root'),.
787:    doc="""The root of the path, i.
791: the drive and root, or ''.""".
792:f._drv + self._root.
799:._drv or self._root) else 0):.
844:        drv, root, parts = self..
846:     or drv or root or len(parts) .
848:lf._drv, self._root,.
869:lf._drv, self._root,.
877:hod, drive and root are considered.
885:        root = self._root.
886:        if root:.
887:_parts = [drv, root] + parts[1:].
890:    to_drv, to_root, to_parts = se.
891:        if to_root:.
892: = [to_drv, to_root] + to_parts[1:.
897:        if (root or drv) if n =.
898:rts(to_drv, to_root, to_parts).
901:rsed_parts('', root if n == 1 else.
940:        root = self._root.
942: 1 and (drv or root):.
944:sed_parts(drv, root, parts[:-1]).
952:te (has both a root and, if applic.
954:  if not self._root:.
969:        drv, root, pat_parts = s.
974:        if root and root != cf.
974:(self._root):.
977:     if drv or root:.
1054:lf._drv, self._root, parts).
1127:        drv, root, pattern_parts.
1128:     if drv or root:.
1139:        drv, root, pattern_parts.
1140:     if drv or root:.
1195:        import pwd.
1196:        return pwd.getpwuid(self..
1530:._drv or self._root) and.
