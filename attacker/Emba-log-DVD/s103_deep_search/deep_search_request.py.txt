[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/werkzeug/sansio/request.py[0m
53:    :param root_path: The pref.
56:he URL after ``root_path``..
125:        root_path: str,.
141:        self.root_path = root_pa.
142:L after :attr:`root_path`. This is.
215: scheme, host, root path, path,.
218:elf.host, self.root_path, self.pat.
224:elf.host, self.root_path, self.pat.
227:    def root_url(self) -> s.
228:eme, host, and root path. This is .
228:the root.
231:elf.host, self.root_path).
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/urllib3/util/request.py[0m
51:rated username:password string for 'au.
55:rated username:password string for 'pr.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/urllib/request.py[0m
53:authinfo.add_password(realm='PDQ App.
56:               passwd='geheim$parole.
105:lituser, _splitpasswd,.
110:# check for SSL.
112:    import ssl.
114:    _have_ssl = False.
116:    _have_ssl = True.
122:    'HTTPPasswordMgr', 'HTTPPass.
123:    'HTTPPasswordMgrWithPriorAut.
155:, it must be a ssl.SSLContext ins.
156:   the various SSL options. See H.
162:    ssl.SSLContext.load_ve.
208:  if not _have_ssl:.
209:se ValueError('SSL support not av.
210:     context = ssl.create_default.
210:_context(ssl.Purpose.SERVER.
765:(scheme, user, password, host/port) gi.
788:        user, password = _splitpasswd.
790:        user = password = None.
791: scheme, user, password, hostport.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/werkzeug/wrappers/request.py[0m
117:            root_path=_wsgi_dec.
810:xy_type, user, password, hostport = _p.
503:    def script_root(self) -> str:.
817:   if user and password:.
504:or :attr:`self.root_path`. ``envir.
819:       unquote(password)).
504:on["SCRIPT_ROOT"]``.
836:class HTTPPasswordMgr:.
507:   return self.root_path.
839:        self.passwd = {}.
510:    def url_root(self) -> str:.
841:    def add_password(self, realm, u.
841:ri, user, passwd):.
511:ias for :attr:`root_url`. The URL .
512:        root path. For exam.
845:lm not in self.passwd:.
514:   return self.root_url.
846:          self.passwd[realm] = {}.
850:          self.passwd[realm][reduced.
850:_uri] = (user, passwd).
852: def find_user_password(self, realm, a.
853:domains = self.passwd.get(realm, {}).
900:class HTTPPasswordMgrWithDefaultR.
900:ealm(HTTPPasswordMgr):.
902: def find_user_password(self, realm, a.
903:        user, password = HTTPPassword.
903:Mgr.find_user_password(self, realm,.
906:  return user, password.
907:    return HTTPPasswordMgr.find_user_p.
910:class HTTPPasswordMgrWithPriorAut.
910:h(HTTPPasswordMgrWithDefaultR.
916:    def add_password(self, realm, u.
916:ri, user, passwd, is_authentica.
920:   super().add_password(None, uri, use.
920:r, passwd).
921:   super().add_password(realm, uri, us.
921:er, passwd).
955:__init__(self, password_mgr=None):.
956:        if password_mgr is None:.
957:            password_mgr = HTTPPass.
958:        self.passwd = password_mgr.
959:      self.add_password = self.passwd..
959:add_password.
984:ser, pw = self.passwd.find_user_pass.
996:t hasattr(self.passwd, 'is_authentic.
997:      not self.passwd.is_authenticat.
1001:         user, passwd = self.passwd..
1001:find_user_password(None, req.full.
1002:'.format(user, passwd).encode().
1009:f hasattr(self.passwd, 'is_authentic.
1011:          self.passwd.update_authent.
1013:          self.passwd.update_authent.
1062:__init__(self, passwd=None):.
1063:        if passwd is None:.
1064:            passwd = HTTPPassword.
1065:        self.passwd = passwd.
1066:      self.add_password = self.passwd..
1066:add_password.
1077:on't fail endlessly - if we faile.
1078:Hm. Unless the Password Manager is.
1133:ser, pw = self.passwd.find_user_pass.
1201:s not transmit passwords in the clear..
1515:    # username/password handling.
1518:         user, passwd = _splitpasswd.
1520:            passwd = None.
1523:        passwd = passwd or ''.
1536:nect_ftp(user, passwd, host, port, d.
1556:tp(self, user, passwd, host, port, d.
1557:pwrapper(user, passwd, host, port, d.
1576:tp(self, user, passwd, host, port, d.
1581:pwrapper(user, passwd, host, port,.
1856:        user_passwd = None.
1857:        proxy_passwd= None.
1861:          user_passwd, host = _split.
1867:         proxy_passwd, host = _split.
1871:          user_passwd = None.
1877:          user_passwd, realhost = _s.
1878:       if user_passwd:.
1885:      if proxy_passwd:.
1886:         proxy_passwd = unquote(prox.
1886:y_passwd).
1887:64encode(proxy_passwd.encode()).deco.
1891:       if user_passwd:.
1892:          user_passwd = unquote(user.
1892:_passwd).
1893:b64encode(user_passwd.encode()).deco.
1960:    if _have_ssl:.
2020:if user: user, passwd = _splitpasswd.
2021:        else: passwd = None.
2024:        passwd = unquote(pass.
2049:pwrapper(user, passwd, host, port, d.
2243:        user, passwd = self.get_use.
2243:r_passwd(proxyhost, rea.
2244:f not (user or passwd): return None.
2246:         quote(passwd, safe=''), pro.
2261:        user, passwd = self.get_use.
2261:r_passwd(proxyhost, rea.
2262:f not (user or passwd): return None.
2264:         quote(passwd, safe=''), pro.
2275:        user, passwd = self.get_use.
2275:r_passwd(host, realm, i.
2276:f not (user or passwd): return None.
2278:         quote(passwd, safe=''), hos.
2289:        user, passwd = self.get_use.
2289:r_passwd(host, realm, i.
2290:f not (user or passwd): return None.
2292:         quote(passwd, safe=''), hos.
2299:  def get_user_passwd(self, host, re.
2306:        user, passwd = self.prompt_.
2306:user_passwd(host, realm).
2307:    if user or passwd: self.auth_cac.
2307:[key] = (user, passwd).
2308:  return user, passwd.
2310:ef prompt_user_passwd(self, host, re.
2315:            passwd = getpass.getp.
2315:ass("Enter password for %s in %s a.
2317:  return user, passwd.
2367:__(self, user, passwd, host, port, d.
2370:        self.passwd = passwd.
2388:elf.user, self.passwd).
2417:               pwd = self.ftp.pwd.
2424:  self.ftp.cwd(pwd).
