[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/__pycache__/imaplib.cpython-38.pyc[0m
24:QUOTA..GETQUOTAROOT..MYRIGHTS..LIS.
42: However, the 'password' argument to t.
187:.Get the quota root's resource usa.
191:ance>.getquota(root).
192:Ar.).rV..rootr.r.r?.
192: list of quota roots for the named.
194:  (typ, [[QUOTAROOT responses...],.
194:tance>.getquotaroot(mailbox).
195:r...QUOTAROOTr.).rVr..
195:..quota..quotarootr?r?r@.
195:..getquotaroot;.s.......
195:.IMAP4.getquotaroot..""..*c..
201:sing plaintext password..
203:e>.login(user, password).
205:        NB: 'password' will be quote.
206:).rV..user..passwordr.r.r?.
209:cram_md5(user, password).
211:hallenger...pwdr?r?r@.
241: an authorised administrator to pro.
274:iSet the quota root's resource lim.
276:ance>.setquota(root, limits).
285:Nr4z.SSL support missin.
285:ession)...HAVE_SSLrArNrB.
285:rx..ssl.._create_stdli.
285:r.).rV..ssl_contextr.r..
385:..IMAP4_SSLa3.IMAP4 clie.
385:nt class over SSL connection.
387:te with: IMAP4_SSL([host[, port[,.
387:e[, certfile[, ssl_context]]]]]).
390:standard IMAP4 SSL port);.
391: contains your private key (default: None.
393:               ssl_context - a SS.
394:           and private key (default: None.
395:      Note: if ssl_context is pro.
400:|....dS).Nz8ssl_context and ke.
400:lly exclusivez9ssl_context and ce.
400:, use a custom ssl_context instea.
401:.......z.IMAP4_SSL.__init__c..
402:.....z.IMAP4_SSL._create_socket.
403:standard IMAP4 SSL port)..
406:s..z.IMAP4_SSL.open).r<r=.
406:rs...IMAP4_SSL_PORTrYr..
469:s).rDz.IMAP password for %s on %s: .
480:getuser..USER..PASSWD..test_mesg..te.
