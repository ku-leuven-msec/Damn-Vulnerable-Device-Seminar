[[0;32m+[0m][0;32m /log/firmware/firmware/lib/modules/5.4.72-v8/kernel/fs/btrfs/btrfs.ko[0m
1590:btrfs_update_rootbtrfs_fi.
1590:nd_orphan_rootsbtrfs_add_roo.
1590:__add_reloc_rootbackref.
1590:merge_reloc_rootsrelocat.
1590:qgroup_free_refrootbtrfs_qu.
1591:nu64root_objectidino.
1591:map_lenroot_objisi.
1591:ractionref_rootlevel.
1591:amehighrootidreserved.
1591:snr_old_rootsnr_new_roo.
1591:s64refrootroot_idobject.
1591:-%pU: root=%llu(%s) gen=%.
1592:%pU: root=%llu(%s) gen=%.
1594:%pU: root=%llu(%s) inode.
1595:%pU: root=%llu(%s) inode.
1596:%pU: root=%llu(%s) ino=%.
1597:%pU: root=%llu(%s) ino=%.
1598:%pU: root=%llu(%s) ino=%.
1600:t=%llu(%s) ref_root=%llu(%s) level.
1601:t=%llu(%s) ref_root=%llu(%s) owner.
1603:%pU: root=%llu(%s) refs=.
1605:%pU: root=%llu(%s) start.
1613:es=%llu nr_old_roots=%llu nr_new_r.
1616:%pU: refroot=%llu(%s) type=.
1617:%pU: refroot=%llu(%s) type=.
1618:%pU: root_id=%llu key=[%.
1619:%pU: root=%llu(%s) ino=%.
1622:|%pU: root=%llu(%s) ino=%.
1623:%pU: root=%llu(%s) ino=%.
1625:%pU: root=%llu(%s) offse.
1628:%pU: root=%llu(%s) len=%.
1629:%pU: root=%llu(%s) block.
1634:%pU: root=%llu ino=%llu .
1636:ee=%s ino=%llu root=%llu start=%ll.
1637:ee=%s ino=%llu root=%llu start=%ll.
1638:ee=%s ino=%llu root=%llu start=%ll.
1645: use 'usebackuproot' instead.6try.
1645: to use backup root at mount time.
1645:4BTRFS: 'subvolrootid' mount optio.
1647:TY_PAGESROOT_DIRTY_LOG_PAGE.
1647:ELFTESTROOT_TREEEXT.
1647:FS_TREEROOT_TREE_DIRCSU.
1647:usebackuprootuser_subvol_.
1647:ysubvolrootid=%dcheck_int.
1648:blocks on a fs root that's being d.
1650:u from get_old_root.2slot %d.
1651:lu parent %llu root %llu  owner %l.
1651: action %d ref_root %llu parent %l.
1651:t data backref root %llu objectid .
1655:.6..root data bytenr %l.
1658: block backref root %llu.
1685:on_v2 found in root item. This roo.
1685:unable to find root key (%llu %u %.
1686:iled to delete root orphan item.
1688:, offset %llu, root %llu.4failed.
1689:he objectid of root %llu reaches i.
1689: found %llu&root->objectid_mute.
1689:x&root->log_mutex.
1689:&root->ordered_exten.
1689:t_mutex&root->delalloc_mute.
1689:x&root->log_writer_wa.
1689:it&root->log_commit_wa.
1689:it[0]&root->log_commit_wa.
1689:: %llu.3tree_root level too big:.
1689:%d.3chunk_root level too big:.
1689:>= %d.3log_root level too big:.
1689: %llu.4tree_root block unaligne.
1689:.4chunk_root block unaligne.
1689:llu.4log_root block unaligne.
1689:ration < chunk_root_generation: %l.
1689:riters->wait&root->ino_cache_wai.
1690:info->delalloc_root_mutex&delay.
1690:ed_root->wait&fs_.
1690:s_info->commit_root_sem&fs_.
1690: to read chunk root.3failed t.
1690:d to read tree root.4failed .
1690:to read root (objectid=%llu.
1694:.4csum failed root %lld ino %lld .
1694:.4csum failed root %llu ino %llu .
1695: for ino %llu (root %llu): %d.
1695: for ino %llu (root %llu): %d.4.
1716:deduplicate to root %llu while sen.
1717:recovering log root tree.Couldn.
1717: find tree log root.Couldn't r.
1717:ead tree log root.Couldn't r.
1717:ead target root for tree log r.
1718: ino cache for root %llu.4BTRFS.
1725:.4csum failed root %lld ino %lld .
1725:.4csum failed root %llu ino %llu .
1727:t_opDuplicate root found for star.
1729:e delayed node(root id: %llu, inod.
1729:e delayed node(root id: %llu, inod.
1729:physical %llu, root %llu, inode %l.
1729:physical %llu, root %llu, inode %l.
1730:, cur_level=%d root_level=%d.3.
1730:t initialized, root_level=%d cur_l.
1730:ode item, send root is %llu, paren.
1730:t root is %llu.3s.
1730: unbalanced %d root %llu.3na.
1730:.4cannot use root %llu for send .
1730: inode %llu at root %llusecurit.
1730:ackref in send_root. inode=%llu, o.
1731:s to ino %llu (root %llu): %db.
1732:2corrupt leaf: root=%llu block=%ll.
1732:.2corrupt %s: root=%llu block=%ll.
1732:.2corrupt %s: root=%llu block=%ll.
1732:.2corrupt %s: root=%llu block=%ll.
1732:.2corrupt %s: root=%llu block=%ll.
1732:.2corrupt %s: root=%llu block=%ll.
1732:invalid root id 0inv.
1732:alid root id 0 for reloc.
1732:invalid root item size, hav.
1732:uinvalid root generation, ha.
1732:u]invalid root v2 generation,.
1732:%llu]invalid root last_snapshot,.
1732:%llu]invalid root bytenr, have %.
1732:invalid root level, have %u.
1732:]invalid root flags, have 0x.
1732:2corrupt node: root=%llu block=%ll.
1732:invalid root, root %llu mus.
1732:invalid owner, root 0 is not defin.
1733:ce_lock&locks_root->lock.7.
1790:ree.cfs/btrfs/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
1790:s/root-tree.cfs/btrf.
4721:.0..d_make_root.
4722:ee=%s ino=%llu root=%llu start=%ll.
4722:" }, { IO_TREE_ROOT_DIRTY_LOG_PAGE.
4722:S, "ROOT_DIRTY_LOG_PAGE.
4722:REC->ino, REC->rootid, REC->start,.
4722:ee=%s ino=%llu root=%llu start=%ll.
4722:" }, { IO_TREE_ROOT_DIRTY_LOG_PAGE.
4722:S, "ROOT_DIRTY_LOG_PAGE.
4722:REC->ino, REC->rootid, REC->start,.
4722:ee=%s ino=%llu root=%llu start=%ll.
4722:" }, { IO_TREE_ROOT_DIRTY_LOG_PAGE.
4722:S, "ROOT_DIRTY_LOG_PAGE.
4722:REC->ino, REC->rootid, REC->start,.
4722:6"})"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:>mod"%pU: root_id=%llu key=[%.
4722:EC->fsid, REC->root_id, REC->objec.
4722:ze"%pU: refroot=%llu(%s) type=.
4722:>fsid, REC->refroot, ((REC->refroo.
4722:L) || (REC->refroot >= 1ULL && REC.
4722:->refroot <= 8ULL)) ? __.
4722:mbolic(REC->refroot, { 1ULL, "ROOT.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:f"%pU: refroot=%llu(%s) type=.
4722:>fsid, REC->refroot, ((REC->refroo.
4722:L) || (REC->refroot >= 1ULL && REC.
4722:->refroot <= 8ULL)) ? __.
4722:mbolic(REC->refroot, { 1ULL, "ROOT.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:f"%pU: refroot=%llu(%s) type=.
4722:>fsid, REC->refroot, ((REC->refroo.
4722:L) || (REC->refroot >= 1ULL && REC.
4722:->refroot <= 8ULL)) ? __.
4722:mbolic(REC->refroot, { 1ULL, "ROOT.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:es=%llu nr_old_roots=%llu nr_new_r.
4722:s, REC->nr_old_roots, REC->nr_new_.
4722:roots"%pU: transi.
4722:es"%pU: root=%llu ino=%llu .
4722:EC->fsid, REC->rootid, REC->ino, R.
4722:_bytes"%pU: root=%llu(%s) block.
4722:2ULL, { 1ULL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:>len"%pU: root=%llu(%s) len=%.
4722:2ULL, { 1ULL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:AID6"})"%pU: root=%llu(%s) start.
4722:2ULL, { 1ULL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:C->bytes"%pU: root=%llu(%s) refs=.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:level"%pU: root=%llu(%s) offse.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:t=%llu(%s) ref_root=%llu(%s) owner.
4722:rent, { 1ULL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722: "-", REC->ref_root, ((REC->ref_ro.
4722:) || (REC->ref_root >= 1ULL && REC.
4722:->ref_root <= 8ULL)) ? __.
4722:bolic(REC->ref_root, { 1ULL, "ROOT.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:t=%llu(%s) ref_root=%llu(%s) level.
4722:rent, { 1ULL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722: "-", REC->ref_root, ((REC->ref_ro.
4722:) || (REC->ref_root >= 1ULL && REC.
4722:->ref_root <= 8ULL)) ? __.
4722:bolic(REC->ref_root, { 1ULL, "ROOT.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:>wait"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:atasync"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:te"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:_index"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:efs"%pU: root=%llu(%s) inode.
4722:EC->fsid, REC->root_obj, ((REC->ro.
4722:9ULL) || (REC->root_obj >= 1ULL &&.
4722: REC->root_obj <= 8ULL)) .
4722:_symbolic(REC->root_obj, { 1ULL, ".
4722:ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:on"%pU: root=%llu(%s) inode.
4722:EC->fsid, REC->root_obj, ((REC->ro.
4722:9ULL) || (REC->root_obj >= 1ULL &&.
4722: REC->root_obj <= 8ULL)) .
4722:_symbolic(REC->root_obj, { 1ULL, ".
4722:ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:en"%pU: root=%llu(%s) ino=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:s_type"%pU: root=%llu(%s) gen=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
4722:ans"%pU: root=%llu(%s) gen=%.
4722:EC->fsid, REC->root_objectid, ((RE.
4722:C->root_objectid >= -9.
4722:ULL) || (REC->root_objectid >= 1U.
4722:LL && REC->root_objectid <= 8U.
4722:_symbolic(REC->root_objectid, { 1U.
4722:LL, "ROOT_TREE" }, { 2UL.
4722:E" }, { 6ULL, "ROOT_TREE_DIR" }, {.
5016:nebtrfs_mount_rootbtrfs_resize_t.
5016:btrfs_fsbtrfs_root_fs_typeprintk.
5016:mod_log_oldest_root.isra.0get_ord.
5016:mod_log_insert_root.isra.0test_an.
5016:d_set_bitadd_root_to_dirty_list.
5016:insert_new_roottree_mod_log_f.
5016:ync_startnext_root_backupend_wor.
5016:ransid__setup_rootbtrfs_destroy_.
5016:nup_bg_iofree_root_extent_buffers.
5016:.part.0free_root_pointersbtrfs.
5016:trfs_read_tree_rootbtrfs_get_fs_r.
5016:switch_commit_roots__btrfs_wait_.
5016:ra.0commit_fs_rootscommit_cowonl.
5016:y_rootsbtrfs_trans_r.
5016:fcreate_reloc_root__add_reloc_ro.
5016:ot__del_reloc_rootfree_reloc_roo.
5016:emark_garbage_rootprepare_to_rel.
5016:should_ignore_rootwalk_up_backre.
5016:fselect_one_rootselect_reloc_r.
5016:gemerge_reloc_rootmerge_reloc_ro.
5016:nc_run_delayed_rootfill_stack_ino.
5016:btrfs_find_all_roots_safeinode_to.
5016:efcntmaybe_fs_roots.part.0qgroup.
5016:.14844__clone_root_cmp_bsearch__.
5016:clone_root_cmp_sortincon.
5016:ot_errorbtrfs_root_dec_send_in_pr.
5016:item_errcheck_root_itemcheck_dir.
5016:fs_add_dropped_rootbpf_trace_run4.
5016:trfs_lookup_fs_rootbtrfs_dirty_pa.
5016:ebtrfs_record_root_in_transbtrfs.
5016:readbtrfs_del_rootbtrfs_alloc_pa.
5016:fbtrfs_get_fs_rootbtrfs_init_dev.
5016:btrfs_add_dead_rootd_make_rootbt.
5016:check_and_init_root_iteminode_dio.
5016:btrfs_free_log_root_treebtrfs_fre.
5016:btrfs_free_fs_roots_raw_spin_loc.
5016:nodebtrfs_del_root_refinode_get_.
5016:btrfs_find_all_rootsbtrfs_cont_ex.
5016:inalbtrfs_old_root_levelinode_su.
5016:op_and_free_fs_rootmnt_drop_write.
5016:ybtrfs_insert_rootinode_init_onc.
5016:ee_spacebtrfs_root_nodebtrfs_get.
5016:rfs_cleanup_fs_rootsbtrfs_end_tra.
5016:btrfs_init_log_root_treebtrfs_rea.
5016:s_wait_ordered_roots__tracepoint_.
5016:idsbtrfs_find_rootbtrfs_set_root.
5016:btrfs_init_fs_rootmake_kgidinva.
5016:obtrfs_defrag_rootinsert_inode_l.
5016:fs_find_orphan_rootsbtrfs_qgroup_.
5016:free_refrootbtrfs_set_disk.
5016:_seqbtrfs_add_root_refbtrfs_star.
5016:t_delalloc_roots__tracepoint_.
5016:assert_delayed_root_emptybtrfs_pr.
5016:rfs_init_reloc_rootcrypto_shash_f.
5016:agsbtrfs_copy_rootbtrfs_delalloc.
5016:btrfs_free_fs_rootload_free_ino_.
5016:trfs_insert_fs_rootinvalidate_ino.
5016:pbtrfs_update_root_timesbtrfs_de.
5016:blebtrfs_lock_root_nodelockref_g.
5016:_create_subvol_root__lock_pagevf.
5016:s_update_reloc_rootbtrfs_wait_on_.
5016:ebtrfs_update_rootulist_allocbt.
5016:trfs_read_lock_root_nodeposix_acl.
5016:btrfs_read_fs_rootcan_nocow_exte.
