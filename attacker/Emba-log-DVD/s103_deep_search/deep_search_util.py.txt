[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/wsgiref/util.py[0m
167:    'upgrade'.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/gevent/testing/util.py[0m
426:    root = os.path.dirn.
427:s(os.path.join(root, 'setup.py')):.
428:        prev, root = root, os.pat.
428:h.dirname(root).
429:        if root == prev:.
430:inite loops at root.
432:    return root.
508:    from the root of the gevent .
510: is set to the root of the gevent .
531:            root = self.find_se.
534:n os.path.join(root, 'examples').
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/dnf/util.py[0m
37:import pwd.
121:def am_i_root():.
173:        return pwd.getpwuid(os.ge.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/ctypes/util.py[0m
87:.g., shr.o, libssl.so).
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/pip/_vendor/distlib/util.py[0m
18:    import ssl.
20:    ssl = None.
270:ests(resources_root, rules):.
273:f get_rel_path(root, path):.
275:        root = root.replace(os.pat.
277:ath.startswith(root).
278:eturn path[len(root):].lstrip('/').
282:join(resources_root, base).
286:path(resources_root, abs_path).
811:    username = password = None.
817:     username, password = prefix.split.
820:    if password:.
821:        password = unquote(pass.
822:turn username, password, netloc.
1168:If `node` is a root node, pop the .
1264:        for root, dirs, files i.
1266:= os.path.join(root, name).
1267:         rel = root[dlen:].
1415:if ssl:.
1435:if not hasattr(ssl, 'SSLContext').
1438:   cert_reqs = ssl.CERT_REQUIRED.
1440:   cert_reqs = ssl.CERT_NONE.
1441:   self.sock = ssl.wrap_socket(so.
1443:               ssl_version=ssl.PR.
1443:OTOCOL_SSLv23,.
1446:     context = ssl.SSLContext(ssl.
1446:.PROTOCOL_SSLv23).
1447:    if hasattr(ssl, 'OP_NO_SSLv2'.
1448:ext.options |= ssl.OP_NO_SSLv2.
1453:.verify_mode = ssl.CERT_REQUIRED.
1455:    if getattr(ssl, 'HAS_SNI', Fa.
1527:    if ssl:.
1551:if ssl:.
1818:             ('password', None)):.
1842:              'password': config.get(s.
1842:erver, 'password'),.
1849:elf, username, password):.
1857:g.set('pypi', 'password', password).
1868:sername, index.password).
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/distutils/util.py[0m
136:def change_root (new_root, pat.
137:ame' with 'new_root' prepended.  I.
138:.path.join(new_root,pathname)"..
144:.path.join(new_root, pathname).
146:.path.join(new_root, pathname[1:]).
152:.path.join(new_root, path).
173:        import pwd.
174:iron['HOME'] = pwd.getpwuid(os.ge.
177:            # password database, do n.
[[0;32m+[0m][0;32m /log/firmware/firmware/usr/lib/python3.8/site-packages/gevent/util.py[0m
309:hod to get the root greenlet trees.
310:ee` to get the root greenlet tree .
317: this tree the root for the curren.
330:    def root(self):.
477:    def _root_greenlet(green.
478:eenlet_tree_is_root', False):.
485:reenlet = cls._root_greenlet(getcu.
488:        roots = {} # root g.
489:current_tree = roots[main_greenlet.
492:        root_greenlet = cls.
492:._root_greenlet.
500:rent under the root..
501:spawn_parent = root_greenlet(ob).
503:pawn_parent is root_greenlet(spawn.
503:_parent not in roots:.
505:pawn_parent] = roots[spawn_parent].
522:        return roots, current_tree.
